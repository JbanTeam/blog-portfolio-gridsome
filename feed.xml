<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>A Gridsome Minimal Blog</title>
        <link>https://jbanteam.github.io/blog-portfolio-gridsome</link>
        <description>Best blog feed evah.</description>
        <lastBuildDate>Mon, 09 Nov 2020 16:38:43 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Gridsome Feed Plugin</generator>
        <item>
            <title><![CDATA[5 Vuex Plugins]]></title>
            <link>https://jbanteam.github.io/blog-portfolio-gridsome/blog/5-vuex-plugins/</link>
            <guid>https://jbanteam.github.io/blog-portfolio-gridsome/blog/5-vuex-plugins/</guid>
            <pubDate>Sat, 02 May 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
![Vue](/uploads/blog/vue-secondpost/vue-secondpost.jpeg)

There are a lot of good reasons to use Vuex to manage the state of your Vue.js app. For one, it’s really easy to add super-cool features with a Vuex plugin. Developers in the Vuex community have created a tonne of free plugins for you to use, with many of the features you can imagine, and some you may not have imagined.

In this article, I will show you five feature that you can easily add to your next project with a Vuex plugin.

1. Persisting state
2. Syncing tabs/windows
3. Language localization
4. Managing multiple loading states
5. Caching actions

## 1. Persisting state

[vuex-persistedstate](https://github.com/robinvdvleuten/vuex-persistedstate) uses the browser’s local storage to persist your state across sessions. This means that refreshing the page or closing a tab won’t wipe your data.

A good use case for this would be a shopping cart: if the user accidentally closes a tab, they can reopen it with the page state intact.

![persisting_state](/uploads/blog/vue-secondpost/persisting_state.gif)

## 2. Syncing tabs/windows

[vuex-shared-mutations](https://github.com/xanf/vuex-shared-mutations) synchronizes state between different browser tabs. It does this by storing a mutation to local storage. The storage event triggers an update in all other tabs/windows, which replays the mutation, thus keeping state in sync.

![syncing_tabs-windows](/uploads/blog/vue-secondpost/syncing_tabs-windows.gif)

## 3. Language localization

[vuex-i18n](https://github.com/dkfbasel/vuex-i18n) allows you to easily store content in multiple languages. It is then trivial to switch languages in your app.
One cool feature is that you can store strings with tokens e.g. “Hello {name}, this is your Vue.js app.”. All your translations can have the same token where it’s needed in the string.

![language_localization](/uploads/blog/vue-secondpost/language_localization.gif)

## 4. Managing multiple loading states

[vuex-loading](https://github.com/f/vue-wait) helps to manage multiple loading states in your application. This plugin is handy for real-time apps where changes in state are frequent and complex.

![managing_multiple_loading_states](/uploads/blog/vue-secondpost/managing_multiple_loading_states.gif)

## 5. Caching actions

[vuex-cache](https://github.com/superwf/vuex-cache) can cache your Vuex actions. For example, if you’re retrieving data from a server, this plugin will cache the result the first time you call the action, then return the cached value on subsequent dispatches. It’s trivial to clear the cache when necessary.

![caching_actions](/uploads/blog/vue-secondpost/caching_actions.gif)

The end.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[How to Structure a Vue.js Project]]></title>
            <link>https://jbanteam.github.io/blog-portfolio-gridsome/blog/how-to-structure-a-vue-js-project/</link>
            <guid>https://jbanteam.github.io/blog-portfolio-gridsome/blog/how-to-structure-a-vue-js-project/</guid>
            <pubDate>Thu, 30 Apr 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
![Vue](/uploads/blog/vuepost/vue.png)

Vue.js is more than a hype, it’s a great frontend framework. It’s quite easy to get started with it and to build a web app. Vue.js is often described as a framework for small apps and even sometimes as an alternative to jQuery because of its small size! I personally think that it can also fit for bigger projects and in this case, it’s important to structure it well, in terms of the component architecture.

Before starting my first big Vue.js project, I did some research in order to find the perfect folder structure, component architecture, and naming convention. I went through the Vue.js documentation, a few articles and many GitHub open source projects.

I needed to find the answers to a few questions I had. That’s what you will find in this post:

- How do you structure the files and folders inside the Vue.js project?
- How do you write Smart and Dumb components and where do you put them? It’s a concept coming from React.
- What are Vue.js coding style and best practices?

I will also document with the source I got inspired by and other links to get a better understanding.

## Vue.js folder structure

Here is the content of the src folder. I recommend you to kick-start the project with [Vue CLI](https://github.com/vuejs/vue-cli). I personally used the default Webpack template.

![vue-structure](/uploads/blog/vuepost/vue-structure.jpg)

A few details about each of these folders:

- **assets** — Where you put any assets that are imported into your components
- **components** — All the components of the projects that are not the main views
- **mixins** — The mixins are the parts of javascript code that is reused in different components. In a mixin you can put any component’s methods from Vue.js they will be merged with the ones of the component that uses it.
- **router** — All the routes of your projects (in my case I have them in the index.js). Basically in Vue.js everything is a component. But not everything is a page. A page has a route like “/dashboard”, “/settings” or “search”. If a component has a route it is routed.
- **store (optional)** — The Vuex constants in mutation-type.js, the Vuex modules in the subfolder modules (which are then loaded in the index.js).
- **translations (optional)** — Locales files, I use Vue-i18n, and it works pretty good.
- **utils (optional)** — Functions that I use in some components, such as regex value testing, constants or filters.
- **views** — To make the project faster to read I separate the components that are routed and put them in this folder. The components that are routed for me are more than a component since they represent pages and they have routes, I put them in “views” then when you check a page you go to this folder.

You can eventually add other folders depending on your need such as **filters**,or **constants**, **API**.

### Some resources I got inspired by

- [https://vuex.vuejs.org/en/structure.html](https://vuex.vuejs.org/en/structure.html)
- [https://github.com/vuejs/vue-hackernews-2.0/tree/master/src](https://github.com/vuejs/vue-hackernews-2.0/tree/master/src)
- [https://github.com/mchandleraz/realworld-vue/tree/master/src](https://github.com/mchandleraz/realworld-vue/tree/master/src)

## Smart vs dumb components with Vue.js

Smart and dumb components is a concept I learnt from React. Smart components are also called containers, they are the ones who handle the state changes, they are responsible for **how things work**. On the opposite, the dumb components, also called presentational, only handle the **look and feel**.

If you are familiar with MVC pattern, you can compare **dump components to the View** and **smart components to the Controller**!
In React smart and dumb components are usually put in different folders whereas in Vue.js you put them all in the same folder: components. To differentiate in Vue.js you will use a naming convention. Let’s say you have a dumb card component, then you should use one of these names:

- BaseCard
- AppCard
- VCard

If you have a smart component that uses BaseCard and adds some methods to it, you can for example name it, depending on your project:

- ProfileCard
- ItemCard
- NewsCard

If your smart component is not only a “Smarter” BaseCard with methods, just use any name that fits your component and without starting with Base (or App, or V), for example:

- DashboardStatistics
- SearchResults
- UserProfile

This naming convention comes from the Vue.js official styleguide that also contains naming conventions!

## Naming conventions

Here are a few conventions coming from the Vue.js official styleguide that you need to structure well your project:

- Component names should always be multi-word, except for root “App” components. Use “UserCard” or “ProfileCard” instead of “Card” for example.
- Each component should be in its own file.
- Filenames of single-file components should either be always PascalCase or always kebab-case. Use “UserCard.vue” or “user-card.vue”.
- Components that are only used once per page should begin with the prefix “The”, to denote that there can be only one. For example for a navbar or a footer you should use “TheNavbar.vue” or “TheFooter.vue”.
- Child components should include their parent name as a prefix. For example if you would like a “Photo” component used in the “UserCard” you will name it “UserCardPhoto”. It’s for better readability since files in a folder are usually order alphabetically.
- Always use full name instead of abbreviation in the name of your components. For example don’t use “UDSettings”, use instead “UserDashboardSettings”.

### Vue.js official styleguide

Whether you are an advanced or beginner with Vue.js you should read this Vue.js styleguide, it contains a lot of tips and also naming conventions. It contains a lot of examples of things to do and not to do.

[Style Guide - Vue.js](https://vuejs.org/v2/style-guide/)
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Third Post]]></title>
            <link>https://jbanteam.github.io/blog-portfolio-gridsome/blog/third-post/</link>
            <guid>https://jbanteam.github.io/blog-portfolio-gridsome/blog/third-post/</guid>
            <pubDate>Thu, 23 Jan 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
```
hello_world = 'hello world'
print(hello_world)
```
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Second Post]]></title>
            <link>https://jbanteam.github.io/blog-portfolio-gridsome/blog/second-post/</link>
            <guid>https://jbanteam.github.io/blog-portfolio-gridsome/blog/second-post/</guid>
            <pubDate>Wed, 25 Dec 2019 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla fringilla arcu sit amet nunc pulvinar sagittis. Quisque condimentum faucibus posuere. Etiam nisl ex, lobortis a felis a, ornare accumsan turpis. Etiam tristique lobortis nisl eu congue. Vivamus tempus enim pharetra sem rhoncus, eget facilisis turpis commodo. Aenean posuere ultricies erat, a dapibus tortor semper eget. Nullam sed cursus risus. Fusce massa ligula, varius pellentesque magna in, malesuada faucibus magna. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed dui turpis, fermentum ut varius non, sollicitudin quis elit. Sed dignissim enim id nulla vehicula, nec accumsan ante vestibulum. Donec luctus mollis mi ut iaculis. Aenean sit amet erat mi.

Pellentesque vehicula et urna eu imperdiet. Vestibulum fermentum dignissim mauris, consectetur facilisis risus ornare vitae. Etiam ut vulputate felis. Curabitur lobortis tempus erat sed molestie. Nullam cursus vulputate turpis, porttitor pellentesque enim pharetra non. Donec facilisis nunc sit amet justo varius vestibulum. Vestibulum suscipit elit sit amet vestibulum pellentesque. Ut maximus eu odio vel gravida. In vitae est quis mi sodales semper. Maecenas ac fringilla eros, non consectetur velit. Donec urna odio, aliquet vel urna non, sagittis vestibulum est. Maecenas nec fringilla ante, eget consectetur sapien. Sed in scelerisque sem.

Nam vehicula nulla est, vitae maximus nisi sagittis vitae. Ut nec sagittis magna, sed gravida nunc. Donec ex lacus, cursus nec venenatis sit amet, finibus sed lacus. Sed pulvinar, tortor non pulvinar sodales, magna nulla aliquam ante, eu molestie lacus risus quis magna. Vestibulum ornare vulputate velit vel finibus. Vestibulum nibh risus, volutpat nec enim et, semper posuere mi. Proin dignissim et elit quis volutpat. Integer sagittis congue leo, at ornare turpis ultrices in. Sed id congue magna, eget eleifend odio. Pellentesque venenatis, eros sit amet molestie ultricies, justo lorem interdum sem, a mattis odio tellus id purus. Aliquam consectetur tortor a ipsum hendrerit, id vestibulum leo mattis. Morbi sem lectus, blandit ut magna at, tempor placerat ligula.

Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Ut scelerisque quam at lobortis sodales. Nullam massa nisi, consectetur id faucibus malesuada, scelerisque nec elit. Vivamus a varius erat. Maecenas lacus orci, viverra non tristique ut, aliquam vitae nulla. Donec fringilla pretium lorem, et tincidunt felis consequat eget. Integer malesuada pretium turpis, a euismod orci varius eu. Suspendisse potenti. Ut aliquam, dolor ut aliquam auctor, velit neque porta magna, nec maximus tellus lacus at erat. Ut id tempor magna. Quisque gravida ipsum ac libero convallis ornare.

Aliquam ultrices ante a libero ultricies molestie. Sed bibendum sollicitudin metus id suscipit. Aenean risus arcu, consectetur eu lectus sit amet, dapibus efficitur leo. Nam sagittis enim et mi ornare, sodales placerat quam porttitor. Sed venenatis diam vel dolor imperdiet maximus. Integer vitae odio diam. Vestibulum consequat libero at eros hendrerit, eu mattis purus iaculis. Morbi aliquam in ligula sed porta. Ut non enim porta, ultrices eros vel, lacinia mi. Nam luctus augue in iaculis suscipit.
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[First Post]]></title>
            <link>https://jbanteam.github.io/blog-portfolio-gridsome/blog/first-post/</link>
            <guid>https://jbanteam.github.io/blog-portfolio-gridsome/blog/first-post/</guid>
            <pubDate>Sat, 20 Apr 2019 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[
This is the first post, it is written in Markdown.

# Here's some big text

- and some lists
  - just to show off all of the different elements

### How about some code?

```
Yeah we've got that too!
```

Inline? `i think so`

## Images

![Motorcycle](https://images.unsplash.com/photo-1558981806-ec527fa84c39?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80)
![Campfire](https://images.unsplash.com/photo-1497906539264-eb74442e37a9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80)

## Tables

| Option | Description   |
| ------ | ------------- |
| one    | first option  |
| two    | second option |
| three  | third option  |

# Blockquotes

> "You miss 100% of the shots you don't take -Wayne Gretzky" -Michael Scott
]]></content:encoded>
        </item>
    </channel>
</rss>