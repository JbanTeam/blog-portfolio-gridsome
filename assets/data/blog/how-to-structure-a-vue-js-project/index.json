{"hash":"bff91a3c709cb02f9e72052826f9cb304d44b763","data":{"metadata":{"siteName":"JbanTeam Blog","siteDescription":"My first gridsome blog"},"post":{"id":"2dc6ece831336c37b2c69ee8a90be05e","title":"How to Structure a Vue.js Project","description":"The perfect Vue.js folder structure and component architecture with smart and dumb components","content":"<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1920 800' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-e1a054a6c2158df4bbe02ca7c2579370'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-e1a054a6c2158df4bbe02ca7c2579370)' width='1920' height='800' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAbCAIAAABDQh69AAAACXBIWXMAAAsSAAALEgHS3X78AAAIDklEQVRYw31Y%2b28UVRSev8toMCANpbYSxF98BbAgCEYJKiVoSMA%2btzM7bXe73UefvKqJiYAg7e7se7t9ESE%2boxEodHZnd%2bv/4HfP6Uzv3Kkmk%2b105j7OOfc73/nOaIlGeaSWC9ey8qXXrLhTjtQLum0ZtpVsVGJOCQ%2bDw2L10oT0yqzlsGC0XqApRUOagvvRev5Ga22snhcTnRL%2bxeLyggYN8z%2bxsCAsSTWWYJJiAC7NcKfRtbMQm8Izx%2bvF4EwYgefXmqvTjWWEwHD3w5SEUzbFEyuwrAXr4duwnYEDiUZFt/0e1nJ4i4h4bvCUm621ZKM8vOPbzizNHVSYbCxhb28mBak4v/UQVg7XMor15F4FhoZtcY/YyFvqdMFuWrbqW9a2YB8e4lc%2beQyIUrCED04Fr%2bQDN6UA4deLF5%2bAWBGmjNbyKafC4ZdmCndNaTIPwBIpih/ux50i7hUPsRrWFDihG7/zWQGeAFQQaQRimM5htrkiuy2PAS6wnek6LxxAjGP1YsjO4GauuWzulhIj9fyEAIaEH6eI4443hJXKeKyJV7AAUMG9crYuRFXc6iKUZZ4FB3AaMsBwj0DMNVeQNjgrL/E0bz%2b2G0kGNwzf8WUxGrHBJaMTF0Yy1nXJDi9UGIwBk/%2bdQrAV4PbogRMPdgOcUddhw4%2bxa61VgS5bcAwfo5wDAtNj4qlqyq3W2kg9h0zAABl/HkwjlEIYs%2b2endU3LQDyVmsd2%2bh2Bk8M2wdOWDPVqCLNOONlphqRCEDZjjkA9/gFBHR2gB3FOw/oFNGdpIS7CAwwJuY7FcNHHdkEncwYp2A9L66twug/xdFmwSSjx3BP//Jb5lBYgJWHNtOwA%2bt7aPFYcZRAO9WsjkkJQ/xewkbeQ00OtvcbEwb5pk0QhHC4CsCYAwS121bPz998uJY6VUl%2bEAkdDfVfyt8cbRWMTevMXOToUN9H89GzP82cXEle%2bftuxCkwqbMnyrHzc%2baVcD2b2IX%2bLS/QmlJHonWcaYV4qaKUhYlt/FhK9RGUSvR14fH8gXtX29O9%2b3o%2beWnPOx0nPx1%2bvvjZnamX295/peNY2/SltsWrb1nDg09%2bhLcxQaZLAFI4ULxwMa0hmwmcVYVXOPFgzExzWVNiCZLC/ZCdBr0wyOS0M8RvBjFD/TJ96VVMOuXxjdzx0nhHprfrh762o2f2dBzrjoQOn7/w6oFj7Ve%2beKM41PGg76vH35ovfKXNcAMkP%2bRqCA%2bB2CArsvVA13SzqimlBFnFtQaVbzRwsrjijRJmThDHy5FDDoQ3rcu/fNe10N9ZGGw3L%2b7t6t775om9h7pfe%2b90593eg%2bne7lIssVFQUgipj6jBVtOfrzAOAQ7qF8NlcJiHtNSUcogXYNIk4SdofYpz37ZwuClawkdZqGvPFs9WJw8%2b6O1a7N9/6uN9h0/sO3Si3bjYmR88tDDQ%2b%2bv35qalcPSkqL55opey7q8VWNDcOXxLDjRCTADLa/BeYgDO/ZJUt62wNBOvcLjwGQDDvelzXpTnRK00/Of9I5lQR26gY%2bby3s7u/afOdi0OtC98fbqa1J8tcvh3rHEZnSKyNNOsKvmgu6RCakVSeE5ZlFGnBAfEH1kmeAmOqAglJ4lKUxzCUrBceMDFNqGNhXPrs%2bIQsgNtn587GPvy9fzAkXTo6z9uGxR%2buO1JCQ4ZgijIulGebS4rayK7UE9o5VJEqm4I1phXyFBuFHLEBaDHSTuw3jYkCeAlXxCd2AaqJPY0%2b25%2b5OBCb%2be9vs6FftycW5sLb2QQZky/3lyFoTLcY0Tt444qfgANAPV6a5Um5mQ%2b9RCusZJTWgIshD0m3eKlKAg33nnW6DI6EU4QVMwu9Dy61bnQ15kegPVv58zBv%2b4bxImcRVGnoHAASyP6zfozQfQDoJaQnU5Sp6FYovFBGDUrYGKWMx2uTxFFBKSvoGpuXxSuGN7M6E8WjpdjlM0DPY/mjedpGId1mN3BPEQ7u5xhVBBoxVQscSpU78tBStXY9FEigWTDF04yvQoTRUX06Sqo5RzXf%2byEkEclBPIwfTPT%2b9ttcNHx8rj%2bdNFwOQD2MQmycvEpcNI5CDYOR24AeTsv0ACLTLiaaEcaon4hKjEpUbxckdslGZ1sDZ6DrZXeKswC9kXh/MNr/b/fAXXuiE1HsEJ4N44WcrCWYwU%2b1Vwa8ZW2bWjByJtb6wirt50GOKaox8PFrYkidejQRe2Y31qf8HfGyAGGWbDcCJ1cKw5tLI7bee98DL/o0gOaCkv9TxMbdcX5hBRowUIAA7%2bLSy2LnF6sWyLUMcmBMWXM%2bCsGTAHimfUnCfpBfpQJgFdDO0WKP6/X/OWCOAPr4IZ5xQu0xkL6RmtVVDS39zUkqFD3Xcb5hKgTV6Svtw0yTK4YWIqbBMwNhpOxHqdXur9/56bCcAEsIy1BJY%2bFqpdC21qIm2jTpTB55gh9nuDWNu7s8g1GKDnqoRICTjl/D1VkARuQJEssiSF4ZLcNKffiohlYkkveGB0CJd5OwdXkDxWG6K1Ey5KSeJOb5tS2avex7XZnLIQTTjY9LjSpL5t1qaPwiRlHiBlMQeFDthgBdIHZmG2SflXvtdGMUl9Dw13zLAnACHfNkkbyTDdsXz/A31QYQiKha7sIWKyDyIkmXYo0n2dcAoO8JjIBbtDno2KweG2fDyW0Kqevt1YYTrBGgSCPiVGr7vmgU8AgRqYb1eDnI1dfVGaJasdkCVTLM3iM3QQzK1%2bvRVH4ij9z6CQX/gX9dbmVeG6ODAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e\" width=\"1920\" alt=\"Vue\" data-srcset=\"/blog-portfolio-gridsome/assets/static/vue.82a2fbd.81cfa07988bc9c1979927b731c2b97c7.png 480w, /blog-portfolio-gridsome/assets/static/vue.cbab2cf.81cfa07988bc9c1979927b731c2b97c7.png 1024w, /blog-portfolio-gridsome/assets/static/vue.2665e34.81cfa07988bc9c1979927b731c2b97c7.png 1920w\" data-sizes=\"(max-width: 1920px) 100vw, 1920px\" data-src=\"/blog-portfolio-gridsome/assets/static/vue.2665e34.81cfa07988bc9c1979927b731c2b97c7.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/blog-portfolio-gridsome/assets/static/vue.2665e34.81cfa07988bc9c1979927b731c2b97c7.png\" width=\"1920\" alt=\"Vue\"></noscript></p>\n<p>Vue.js is more than a hype, it’s a great frontend framework. It’s quite easy to get started with it and to build a web app. Vue.js is often described as a framework for small apps and even sometimes as an alternative to jQuery because of its small size! I personally think that it can also fit for bigger projects and in this case, it’s important to structure it well, in terms of the component architecture.</p>\n<p>Before starting my first big Vue.js project, I did some research in order to find the perfect folder structure, component architecture, and naming convention. I went through the Vue.js documentation, a few articles and many GitHub open source projects.</p>\n<p>I needed to find the answers to a few questions I had. That’s what you will find in this post:</p>\n<ul>\n<li>How do you structure the files and folders inside the Vue.js project?</li>\n<li>How do you write Smart and Dumb components and where do you put them? It’s a concept coming from React.</li>\n<li>What are Vue.js coding style and best practices?</li>\n</ul>\n<p>I will also document with the source I got inspired by and other links to get a better understanding.</p>\n<h2 id=\"vuejs-folder-structure\"><a href=\"#vuejs-folder-structure\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vue.js folder structure</h2>\n<p>Here is the content of the src folder. I recommend you to kick-start the project with <a href=\"https://github.com/vuejs/vue-cli\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vue CLI</a>. I personally used the default Webpack template.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 679 449' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9ed46502048df41df577d7074e904c39'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9ed46502048df41df577d7074e904c39)' width='679' height='449' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAqAEADASIAAhEBAxEB/8QAGgABAQEAAwEAAAAAAAAAAAAAAAQDAQIFCP/EACcQAAICAQMBCAMAAAAAAAAAAAABAhEDBBIxIRMiQVFSYXGRIzKB/8QAFAEBAAAAAAAAAAAAAAAAAAAAAP/EABQRAQAAAAAAAAAAAAAAAAAAAAD/2gAMAwEAAhEDEQA/APozUaqeJ5KjFqM1FX5NL3NdLllmjKTUdqk1FrxX2T6qdPMt8o/kVNJOu6uDXSXO5rNklFPhxjT%2bkBUAAAAAAACLP%2b2Wmr7RcxfpXkc6fNk2yW3HLl3vUXz4rwGaUFOe%2b6jltpX6SVSxqcpuE5d6%2bvS1fwB6wMlkybmngl87l1NQAAAAACTUqUN7qbvImqprj344O%2bHBjcN0sffly5Vu/tFAAAAAAAAAA//Z' /%3e%3c/svg%3e\" width=\"679\" alt=\"vue-structure\" data-srcset=\"/blog-portfolio-gridsome/assets/static/vue-structure.64fbc69.ccf5f12311e18b8760b5562a2c0f1ca5.jpg 679w\" data-sizes=\"(max-width: 679px) 100vw, 679px\" data-src=\"/blog-portfolio-gridsome/assets/static/vue-structure.64fbc69.ccf5f12311e18b8760b5562a2c0f1ca5.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/blog-portfolio-gridsome/assets/static/vue-structure.64fbc69.ccf5f12311e18b8760b5562a2c0f1ca5.jpg\" width=\"679\" alt=\"vue-structure\"></noscript></p>\n<p>A few details about each of these folders:</p>\n<ul>\n<li><strong>assets</strong> — Where you put any assets that are imported into your components</li>\n<li><strong>components</strong> — All the components of the projects that are not the main views</li>\n<li><strong>mixins</strong> — The mixins are the parts of javascript code that is reused in different components. In a mixin you can put any component’s methods from Vue.js they will be merged with the ones of the component that uses it.</li>\n<li><strong>router</strong> — All the routes of your projects (in my case I have them in the index.js). Basically in Vue.js everything is a component. But not everything is a page. A page has a route like “/dashboard”, “/settings” or “search”. If a component has a route it is routed.</li>\n<li><strong>store (optional)</strong> — The Vuex constants in mutation-type.js, the Vuex modules in the subfolder modules (which are then loaded in the index.js).</li>\n<li><strong>translations (optional)</strong> — Locales files, I use Vue-i18n, and it works pretty good.</li>\n<li><strong>utils (optional)</strong> — Functions that I use in some components, such as regex value testing, constants or filters.</li>\n<li><strong>views</strong> — To make the project faster to read I separate the components that are routed and put them in this folder. The components that are routed for me are more than a component since they represent pages and they have routes, I put them in “views” then when you check a page you go to this folder.</li>\n</ul>\n<p>You can eventually add other folders depending on your need such as <strong>filters</strong>,or <strong>constants</strong>, <strong>API</strong>.</p>\n<h3 id=\"some-resources-i-got-inspired-by\"><a href=\"#some-resources-i-got-inspired-by\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Some resources I got inspired by</h3>\n<ul>\n<li><a href=\"https://vuex.vuejs.org/en/structure.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://vuex.vuejs.org/en/structure.html</a></li>\n<li><a href=\"https://github.com/vuejs/vue-hackernews-2.0/tree/master/src\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/vuejs/vue-hackernews-2.0/tree/master/src</a></li>\n<li><a href=\"https://github.com/mchandleraz/realworld-vue/tree/master/src\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/mchandleraz/realworld-vue/tree/master/src</a></li>\n</ul>\n<h2 id=\"smart-vs-dumb-components-with-vuejs\"><a href=\"#smart-vs-dumb-components-with-vuejs\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Smart vs dumb components with Vue.js</h2>\n<p>Smart and dumb components is a concept I learnt from React. Smart components are also called containers, they are the ones who handle the state changes, they are responsible for <strong>how things work</strong>. On the opposite, the dumb components, also called presentational, only handle the <strong>look and feel</strong>.</p>\n<p>If you are familiar with MVC pattern, you can compare <strong>dump components to the View</strong> and <strong>smart components to the Controller</strong>!\nIn React smart and dumb components are usually put in different folders whereas in Vue.js you put them all in the same folder: components. To differentiate in Vue.js you will use a naming convention. Let’s say you have a dumb card component, then you should use one of these names:</p>\n<ul>\n<li>BaseCard</li>\n<li>AppCard</li>\n<li>VCard</li>\n</ul>\n<p>If you have a smart component that uses BaseCard and adds some methods to it, you can for example name it, depending on your project:</p>\n<ul>\n<li>ProfileCard</li>\n<li>ItemCard</li>\n<li>NewsCard</li>\n</ul>\n<p>If your smart component is not only a “Smarter” BaseCard with methods, just use any name that fits your component and without starting with Base (or App, or V), for example:</p>\n<ul>\n<li>DashboardStatistics</li>\n<li>SearchResults</li>\n<li>UserProfile</li>\n</ul>\n<p>This naming convention comes from the Vue.js official styleguide that also contains naming conventions!</p>\n<h2 id=\"naming-conventions\"><a href=\"#naming-conventions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Naming conventions</h2>\n<p>Here are a few conventions coming from the Vue.js official styleguide that you need to structure well your project:</p>\n<ul>\n<li>Component names should always be multi-word, except for root “App” components. Use “UserCard” or “ProfileCard” instead of “Card” for example.</li>\n<li>Each component should be in its own file.</li>\n<li>Filenames of single-file components should either be always PascalCase or always kebab-case. Use “UserCard.vue” or “user-card.vue”.</li>\n<li>Components that are only used once per page should begin with the prefix “The”, to denote that there can be only one. For example for a navbar or a footer you should use “TheNavbar.vue” or “TheFooter.vue”.</li>\n<li>Child components should include their parent name as a prefix. For example if you would like a “Photo” component used in the “UserCard” you will name it “UserCardPhoto”. It’s for better readability since files in a folder are usually order alphabetically.</li>\n<li>Always use full name instead of abbreviation in the name of your components. For example don’t use “UDSettings”, use instead “UserDashboardSettings”.</li>\n</ul>\n<h3 id=\"vuejs-official-styleguide\"><a href=\"#vuejs-official-styleguide\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vue.js official styleguide</h3>\n<p>Whether you are an advanced or beginner with Vue.js you should read this Vue.js styleguide, it contains a lot of tips and also naming conventions. It contains a lot of examples of things to do and not to do.</p>\n<p><a href=\"https://vuejs.org/v2/style-guide/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Style Guide - Vue.js</a></p>\n","tags":["Vuejs"],"date":"30 April 2020","timeToRead":4}},"context":{}}